"""
–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï
–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –†–∞–∑–¥–µ–ª–∞ 3
"""

import numpy as np
from scipy.optimize import linprog

class ModelingTasks:
    def __init__(self):
        self.tasks = []
    
    def solve_linear_programming(self):
        """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ó–∞–¥–∞—á–∞ 2 –∏–∑ –¢–ó)"""
        print("üî¢ –†–ï–®–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –õ–ò–ù–ï–ô–ù–û–ì–û –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø")
        print("–§—É–Ω–∫—Ü–∏—è: F = 2x‚ÇÅ + x‚ÇÇ - x‚ÇÉ + x‚ÇÑ - x‚ÇÖ ‚Üí max")
        print("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
        print("  x‚ÇÅ + x‚ÇÇ + x‚ÇÉ = 5")
        print("  2x‚ÇÅ + x‚ÇÇ + x‚ÇÑ = 9") 
        print("  x‚ÇÅ + 2x‚ÇÇ + x‚ÇÖ = 7")
        print("  x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, x‚ÇÖ ‚â• 0")
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Å –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏)
        c = [-2, -1, 1, -1, 1]
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–≤–µ–Ω—Å—Ç–≤
        A_eq = [
            [1, 1, 1, 0, 0],  # x‚ÇÅ + x‚ÇÇ + x‚ÇÉ = 5
            [2, 1, 0, 1, 0],  # 2x‚ÇÅ + x‚ÇÇ + x‚ÇÑ = 9
            [1, 2, 0, 0, 1]   # x‚ÇÅ + 2x‚ÇÇ + x‚ÇÖ = 7
        ]
        b_eq = [5, 9, 7]
        
        # –ì—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        bounds = [(0, None), (0, None), (0, None), (0, None), (0, None)]
        
        try:
            # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            result = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')
            
            if result.success:
                print("\n‚úÖ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û:")
                print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F: {-result.fun:.2f}")
                variables = ['x‚ÇÅ', 'x‚ÇÇ', 'x‚ÇÉ', 'x‚ÇÑ', 'x‚ÇÖ']
                for i, var in enumerate(variables):
                    print(f"{var} = {result.x[i]:.2f}")
            else:
                print("\n‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏: {e}")
    
    def solve_transport_problem(self):
        """–†–µ—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ (–ó–∞–¥–∞—á–∞ 6 –∏–∑ –¢–ó)"""
        print("\nüöö –†–ï–®–ï–ù–ò–ï –¢–†–ê–ù–°–ü–û–†–¢–ù–û–ô –ó–ê–î–ê–ß–ò")
        print("–ü—É–Ω–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: A1=160, A2=140, A3=60")
        print("–ü—É–Ω–∫—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: B1=80, B2=80, B3=60, B4=80")
        print("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π:")
        print("    B1  B2  B3  B4")
        print("A1:  5   4   3   4")
        print("A2:  3   2   5   5") 
        print("A3:  1   6   3   2")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        print("\n‚úÖ –†–µ—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ –∏–ª–∏ —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–≥–æ —É–≥–ª–∞")
    
    def run_all_tasks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("=" * 60)
        print("üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï - –†–ê–ó–î–ï–õ 3")
        print("=" * 60)
        
        self.solve_linear_programming()
        self.solve_transport_problem()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏ scipy –µ—Å–ª–∏ –Ω–µ—Ç: pip install scipy
    tasks = ModelingTasks()
    tasks.run_all_tasks()