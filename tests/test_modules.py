"""
–ú–û–î–£–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
–ê–ò–° "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
"""

import unittest
import os
import sqlite3
from database import Database

class TestPhoneBook(unittest.TestCase):
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.test_db = "test_phonebook.db"
        self.db = Database(self.test_db)
        self.db.connect()
        self.db.create_tables()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if os.path.exists(self.test_db):
            os.remove(self.test_db)
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.assertIsNotNone(self.db.connection)
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_create_tables(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        cursor = self.db.connection.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='contacts'")
        table_exists = cursor.fetchone()
        self.assertIsNotNone(table_exists)
        print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_add_contact(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        cursor = self.db.connection.cursor()
        cursor.execute('''
            INSERT INTO contacts (first_name, last_name, phone, email, organization)
            VALUES (?, ?, ?, ?, ?)
        ''', ("Test", "User", "+79990000000", "test@test.com", "Test Org"))
        
        self.db.connection.commit()
        
        cursor.execute("SELECT COUNT(*) FROM contacts")
        count = cursor.fetchone()[0]
        self.assertEqual(count, 1)
        print("‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")
    
    def test_search_contacts(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor = self.db.connection.cursor()
        cursor.execute('''
            INSERT INTO contacts (first_name, last_name, phone, email, organization)
            VALUES (?, ?, ?, ?, ?)
        ''', ("–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤", "+79991111111", "ivan@mail.ru", "–†–ê–ù–•–∏–ì–°"))
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        cursor.execute('''
            SELECT * FROM contacts WHERE first_name LIKE ? OR last_name LIKE ?
        ''', ('%–ò–≤–∞–Ω%', '%–ò–≤–∞–Ω%'))
        
        results = cursor.fetchall()
        self.assertEqual(len(results), 1)
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –ú–û–î–£–õ–¨–ù–´–• –¢–ï–°–¢–û–í")
    print("=" * 40)
    
    test_suite = unittest.TestLoader().loadTestsFromTestCase(TestPhoneBook)
    test_runner = unittest.TextTestRunner(verbosity=2)
    result = test_runner.run(test_suite)
    
    print("=" * 40)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"‚ö†Ô∏è  –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_tests()